"use strict";
/*
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var spinkits_1 = require("../spinkits");
var pending_interceptor_service_1 = require("../pending-interceptor.service");
var SpinnerComponent = (function () {
    function SpinnerComponent(pendingRequestInterceptorService) {
        var _this = this;
        this.pendingRequestInterceptorService = pendingRequestInterceptorService;
        this.Spinkit = spinkits_1.Spinkit;
        this.spinner = spinkits_1.Spinkit.skCubeGrid;
        this.filteredUrlPatterns = [];
        this.subscription = this.pendingRequestInterceptorService
            .pendingRequestsStatus
            .subscribe(function (hasPendingRequests) {
            _this.isSpinnerVisible = hasPendingRequests;
        });
    }
    SpinnerComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (!(this.filteredUrlPatterns instanceof Array)) {
            throw new TypeError('`filteredUrlPatterns` must be an array.');
        }
        if (!!this.filteredUrlPatterns.length) {
            this.filteredUrlPatterns.forEach(function (e) {
                _this.pendingRequestInterceptorService.filteredUrlPatterns.push(new RegExp(e));
            });
        }
    };
    SpinnerComponent.prototype.ngOnDestroy = function () {
        this.subscription.unsubscribe();
    };
    return SpinnerComponent;
}());
SpinnerComponent.decorators = [
    { type: core_1.Component, args: [{
                selector: 'spinner',
                template: "\n      <div id=\"spinner\" *ngIf=\"isSpinnerVisible\">\n\n              <sk-cube-grid\n                  *ngIf=\"spinner === Spinkit.skCubeGrid\"\n                  [backgroundColor]=\"backgroundColor\">\n              </sk-cube-grid>\n\n              <sk-chasing-dots\n                  *ngIf=\"spinner === Spinkit.skChasingDots\"\n                  [backgroundColor]=\"backgroundColor\">\n              </sk-chasing-dots>\n\n              <sk-double-bounce\n                  *ngIf=\"spinner === Spinkit.skDoubleBounce\"\n                  [backgroundColor]=\"backgroundColor\">\n              </sk-double-bounce>\n\n              <sk-rotating-plane\n                  *ngIf=\"spinner === Spinkit.skRotatingPlane\"\n                  [backgroundColor]=\"backgroundColor\">\n              </sk-rotating-plane>\n\n              <sk-spinner-pulse\n                  *ngIf=\"spinner === Spinkit.skSpinnerPulse\"\n                  [backgroundColor]=\"backgroundColor\">\n              </sk-spinner-pulse>\n\n              <sk-three-bounce\n                  *ngIf=\"spinner === Spinkit.skThreeBounce\"\n                  [backgroundColor]=\"backgroundColor\">\n              </sk-three-bounce>\n\n              <sk-wandering-cubes\n                  *ngIf=\"spinner === Spinkit.skWanderingCubes\"\n                  [backgroundColor]=\"backgroundColor\">\n              </sk-wandering-cubes>\n\n              <sk-wave\n                  *ngIf=\"spinner === Spinkit.skWave\"\n                  [backgroundColor]=\"backgroundColor\">\n              </sk-wave>\n\n      </div>\n    ",
                styles: ["\n      #spinner {\n          top: 0;\n          left: 0;\n          height: 100%;\n          width: 100%;\n          position: fixed;\n          z-index: 9999;\n          filter: alpha(opacity=70);\n          opacity: .7;\n          background-color: #f1f1f1;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n      }\n\n      ::ng-deep .colored-parent, ::ng-deep .colored > div {\n          background-color: #333;\n      }\n    "]
            },] },
];
/** @nocollapse */
SpinnerComponent.ctorParameters = function () { return [
    { type: pending_interceptor_service_1.PendingInterceptorService, },
]; };
SpinnerComponent.propDecorators = {
    'backgroundColor': [{ type: core_1.Input },],
    'spinner': [{ type: core_1.Input },],
    'filteredUrlPatterns': [{ type: core_1.Input },],
};
exports.SpinnerComponent = SpinnerComponent;
//# sourceMappingURL=spinner.component.js.map